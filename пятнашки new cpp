#include "Header.h"
using namespace std;

/// MAIN COORDINATES:
int menuRow = 3, menuCol = 6;    /// координаты меню
int gameRow = 3, gameCol = 6;    ///координаты откуда рисуется доска
int Select = 0;   // выбор в меню 



/// MAIN COLORS
int SelFon = _COLOR::bright_white;     ///
int SelSym = _COLOR::light_red;     /// Выбранные пункты меню (цвет)
int UnselFon = _COLOR::black;          ///
int UnselSym = _COLOR::bright_white;   /// Невыбранные пункты меню (цвет)



/// STANDART SYSTEM COLORS
int stdFon = _COLOR::black;
int stdSym = _COLOR::white;


/// last cursor 
const int std_col = 20, std_row = 10;        //индекс курсора
int Row = std_row, Col = std_col;

void Init()
{
	system("cls");
	setlocale(LC_ALL, "RUS");
	system("color 07");   /// чернобелый цвет системы
	CursorHide(FALSE, 20);
}

void gen_rand(int* d)
{
	srand(time(0));
	int count = 0;
	int j = 0;
	int temp;
	bool is_in_list = false;
	while (count < 15)
	{
		is_in_list = false;
		temp = rand() % 15 + 1;
		for (int i = 0; i < 16; i++)
		{
			if (temp == d[i])
			{
				is_in_list = true;
				break;
			}
		}
		if (!is_in_list)
		{
			d[j] = temp;
			j++;
			count++;
		}


	}

}

void win_case(int step_counter, double seconds)
{
	system("cls");
	SetPos(gameRow, gameCol);
	cout << "Поздравляю, вы выиграли!";
	SetPos(gameRow + 1, gameCol);
	cout << "Всего ходов потребовалось: " << step_counter;
	SetPos(gameRow + 2, gameCol);
	cout << "Времени понадобилось: " << seconds << " секунд";
	SetPos(gameRow + 3, gameCol);
	system("pause");
	int key = _getch();
	switch (key)
	{
	case _KEY::ESC:
		CursorHide(FALSE, 20);
		Init();
		return;  break;
	}

	return;
}

void Start_game(int option, int &Row, int &Col)
{

	int tempRow, tempCol;       ///для заполнения доски 
	bool win = false;
	int step_counter = 0;      ///счетчик ходов 

	int col_x = 0, row_x = 0;     //индекс на доске 
	int col_y = 3, row_y = 3;       // индекс элемента курсора в массиве 

	int d[16] = { 0 };  //сюда будем генерировать числа 
	int p[4][4];        //отсюда будем заполнять доску 
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			p[i][j] = 0;
		}
	}

	system("cls");
	if (option == 1)        //если новая игра 
	{
		gen_rand(d);   ///генерируем числа 
		Row = std_row;   //нижний правый угол 
		Col = std_col;    //нижний правый угол 
	} 
	else    //если продолжить игру 
	{
		ifstream fin1;       /// считываем последнее расположение чисел с прошлой игры
		string slovo; 
		fin1.open("continue.txt");
		int i = 0;
		while (!fin1.eof())
		{
			fin1 >> slovo;
			int chislo = stoi(slovo);   //string -> int 
			d[i] = chislo;           
			i++;
		}
		fin1.close();
	}


	for (int i = 0; i < 4; i++)         ///преобразовываем сгенерированный массив в двумерный,  чтобы вывести на консоль числа 
	{
		for (int j = 0; j < 4; j++)
		{
			p[i][j] = d[i * 4 + j];
		}
	}


	ifstream fin;                    /// рисование доски 
	fin.open("board.txt");
	string line;
	SetPos(gameRow, gameCol);
	int i = 0;
	while (!fin.eof())
	{
		getline(fin, line);
		SetPos(gameRow + i, gameCol);
		cout << line << endl;
		i++;
	}
	fin.close();


	/*int tempik = 1;                      ///ДОСКА ДЛЯ ПРОВЕРКИ 
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			if (tempik<16)
			{
				p[i][j] = tempik;
				tempik++;
			}
		}
	}
	p[3][3] = 0;
	swap(p[3][2], p[2][3]);
	swap(p[2][3], p[2][2]);*/
	clock_t start = clock();    //начало отсчета времени
	
	while (true)
	{

		SetPos(Row, Col);
		tempRow = gameRow + 1;
		tempCol = gameCol + 2;
		for (int i = 0; i < 4; i++)      //заполнение доски 
		{
			for (int j = 0; j < 4; j++)
			{
				SetPos(tempRow, tempCol);
				if (p[i][j] != 0)
					cout << p[i][j];
				else
					cout << "  ";
				tempCol += 4;

			}
			tempRow += 2;
			tempCol = gameCol + 2;
		}


		row_x = (Row - 3) / 2; 
		col_x = (Col - 6) / 4;
		CursorHide(TRUE, 20);
		SetPos(Row, Col);
		int temp = 0;


		for (int i = 0; i < 4; i++)   //Заполнение массива Д, чтобы проверить выишрыш 
		{
			for (int j = 0; j < 4; j++)
			{
				if (temp < 16)
				{
					d[temp] = p[i][j];
					temp++;
				}
			}
		}
		temp = 0;

		if (d[15] == 0)                          //проверка последовательности чтобы определить выигрыш
		{
			for (int i = 2; i < 16; i++)
			{
				if (d[temp] + 1 == i)
				{
					win = true;
					temp++;
				}
				else
				{
					win = false;
					break;
				}
			}
		}
		 
		
		if (win)
		{
			clock_t end = clock();
			double seconds = (double)(end - start) / CLOCKS_PER_SEC;
			win_case(step_counter, seconds);
			break;
		}
			

		int key = _getch();
		
		switch (key)
		{
		case _KEY::UP:
			if (Row > 4)
			{
				Row -= 2;
				row_y = (Row - 3) / 2;
				col_y = (Col - 6) / 4;
				SetPos(Row, Col);
				swap(p[row_x][col_x], p[row_y][col_y]);
				step_counter++;
			}
			break;

		case _KEY::DOWN:
			if (Row < 10)
			{
				Row += 2;
				row_y = (Row - 3) / 2;
				col_y = (Col - 6) / 4;
				SetPos(Row, Col);
				swap(p[row_x][col_x], p[row_y][col_y]);
				step_counter++;

			}
			break;

		case _KEY::RIGHT:
			if (Col < 20)
			{
				Col += 4;
				col_y = (Col - 6) / 4;
				row_y = (Row - 3) / 2;
				SetPos(Row, Col);
				swap(p[row_x][col_x], p[row_y][col_y]);
				step_counter++;

			}
			break;

		case _KEY::LEFT:
			if (Col > 9)
			{
				Col -= 4;
				col_y = (Col - 6) / 4;
				row_y = (Row - 3) / 2;
				SetPos(Row, Col);
				swap(p[row_x][col_x], p[row_y][col_y]);
				step_counter++;
				
			}
			break;
		case _KEY::ESC:
				CursorHide(FALSE, 20);
				Init();
				ofstream fout;
				fout.open("continue.txt");
				for (int i = 0; i < 4; i++)
				{
					for (int j = 0; j < 4; j++)
					{
						fout << p[i][j] << ' ';
					}
					
				}
				fout.close();
				return;  break;
					
		}


	}
	SetPos(30, 30);
	system("pause");
	//Init();

  }

void About()
{
	system("cls");
	SetPos(gameRow, gameCol);
	cout << "Название игры - \"Пятнашки\"";
	SetPos(gameRow+1, gameCol);
	cout << "Цель игры: путем нажатия на стрелки, передвигать пустую ячейку,";
	SetPos(gameRow+2, gameCol);
	cout << "тем самым расставить все числа в порядке их возрастания.";
	SetPos(gameRow+3, gameCol);
	cout << "Автор этой программы - ученица \"IT STEP ACADEMY\" - Негмат Аружан";
	SetPos(gameRow+4, gameCol);
	cout << "Данная программа является экзаменационным заданием." << endl;
	SetPos(gameRow+7, gameCol);
	system("pause");
	system("cls");
}


void records()
{
	system("cls");
	SetPos(gameRow, gameCol);
	cout << "Данная секция пока не работает";
	SetPos(gameRow + 5, gameCol);
	system("pause");
	int key = _getch();
		switch(key)
	{
		case _KEY::ESC:
			system("cls");
			return; break;
	}
}


void Menu()
{
	while (true)
	{
		if (Select == 0)
		{
			SetColor(SelFon, SelSym);
		}
		else
		{
			SetColor(UnselFon, UnselSym);
		}
		SetPos(menuRow + 0, menuCol);
		cout << "Начать новую игру" << endl;
		if (Select == 1)
		{
			SetColor(SelFon, SelSym);
		}
		else
		{
			SetColor(UnselFon, UnselSym);
		}
		SetPos(menuRow + 1, menuCol);
		cout << "Продолжить игру" << endl;

		if (Select == 2)
		{
			SetColor(SelFon, SelSym);
		}
		else
		{
			SetColor(UnselFon, UnselSym);
		}
		SetPos(menuRow + 2, menuCol);
		cout << "Рекорды" << endl;

		if (Select == 3)
		{
			SetColor(SelFon, SelSym);
		}
		else
		{
			SetColor(UnselFon, UnselSym);
		}
		SetPos(menuRow + 3, menuCol);
		cout << "О программе" << endl;

		if (Select == 4)
		{
			SetColor(SelFon, SelSym);
		}
		else
		{
			SetColor(UnselFon, UnselSym);
		}
		SetPos(menuRow + 4, menuCol);
		cout << "Выход" << endl;

		SetColor(stdFon, stdSym);  //чтобы при выходе результат программы был стандартным цветом 



		if (_kbhit())
		{

			int key;
			key = _getch();

			switch (key)
			{
			case _KEY::UP:
				if (Select == 0)
					Select = 4;
				else
					Select--;
				break;

			case _KEY::DOWN:
				if (Select == 4)
					Select = 0;
				else
					Select++;
				break;

			case _KEY::ENTER:
				switch (Select)
				{
				case 0: Start_game(1,Row, Col); break;
				case 1: Start_game(2,Row,Col); break;
				case 2: records(); break;
				case 3: About(); break;
				case 4: return; break;
				default: break;
				}
			}



		}

	}

}


int main()
{
	Init();
	Menu();
	SetPos(20, 50);
	return 0;
}
